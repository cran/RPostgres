# Generated by cynkrathis::use_cmakelists(), do not edit by hand
#
# Call:
# quote(cynkrathis::use_cmakelists())

add_library(RPostgres
  DbColumn.cpp
  DbColumn.h
  DbColumnDataSource.cpp
  DbColumnDataSource.h
  DbColumnDataSourceFactory.cpp
  DbColumnDataSourceFactory.h
  DbColumnDataType.h
  DbColumnStorage.cpp
  DbColumnStorage.h
  DbConnection.cpp
  DbConnection.h
  DbDataFrame.cpp
  DbDataFrame.h
  DbResult.cpp
  DbResult.h
  DbResultImpl.h
  DbResultImplDecl.h
  PqColumnDataSource.cpp
  PqColumnDataSource.h
  PqColumnDataSourceFactory.cpp
  PqColumnDataSourceFactory.h
  PqDataFrame.cpp
  PqDataFrame.h
  PqResult.cpp
  PqResult.h
  PqResultImpl.cpp
  PqResultImpl.h
  PqResultSource.cpp
  PqResultSource.h
  PqUtils.cpp
  PqUtils.h
  RPostgres-init.c
  RPostgres_types.h
  cpp11.cpp
  connection.cpp
  encode.cpp
  encode.h
  encrypt.cpp
  integer64.h
  logging.cpp
  pch.h
  result.cpp
)

execute_process(COMMAND bash "-c" "Rscript -e 'cat(R.home(\"include\"))'" OUTPUT_VARIABLE R_INCLUDE)
execute_process(COMMAND bash "-c" "Rscript -e 'x <- desc::desc_get_deps(); pkgs <- x$package[x$type == \"LinkingTo\"]; paths <- file.path(.libPaths()[[1]], pkgs, \"include\"); cat(paths, sep = \";\")'" OUTPUT_VARIABLE R_LIBRARIES_INCLUDES)

target_include_directories(RPostgres PUBLIC
  ${R_INCLUDE}
  ${R_LIBRARIES_INCLUDES}
)

include(./custom.cmake OPTIONAL)
